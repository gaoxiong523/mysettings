<application>
  <component name="AppStorage">
    <histories>
      <item value="set Serialization Strategy" />
      <item value="Lettuce Connection Factory" />
      <item value="持久化" />
      <item value="The class is * designed to respond to {@link UsernamePasswordAuthenticationToken} authentication * requests." />
      <item value="subclasses" />
      <item value="An {@link AuthenticationProvider} implementation that retrieves user details from a * {@link UserDetailsService}." />
      <item value="Retrieve" />
      <item value="extract Access Token" />
      <item value="We don't want to accidentally issue a token, and we have no way to reconstruct the refresh token" />
      <item value="Calculated" />
      <item value="intercepted" />
      <item value="Strategy for enhancing an access token before it is stored by an {@link AuthorizationServerTokenServices} * implementation." />
      <item value="Helper that translates between JWT encoded token values and OAuth authentication * information (in both directions). Also acts as a {@link TokenEnhancer} when tokens are * granted." />
      <item value="Enables Spring Security global method security similar to the &amp;lt;global-method-security&amp;gt;" />
      <item value="The following annotations are annotated with {@link EnableGlobalAuthentication}" />
      <item value="authenticated" />
      <item value="is Account Non Expired" />
      <item value="is Account Non Locked" />
      <item value="is Credentials Non Expired" />
      <item value="A user approval handler that remembers approval decisions by consulting existing tokens" />
      <item value="approval" />
      <item value="AuthorizationServerEndpointsConfigurer" />
      <item value="authorize Requests" />
      <item value="Configures the {@link AuditorAware} bean to be used to lookup the current principal." />
      <item value="PA entity listener to capture auditing information on persiting and updating entities. To get this one flying be * sure you configure it as entity listener in your {@code orm.xml} as follows:" />
      <item value="legacy" />
      <item value="Client Details Service" />
      <item value="Resource Server Token Services" />
      <item value="principal" />
      <item value="credentials" />
      <item value="Convenience annotation for enabling an Authorization Server (i.e. an {@link AuthorizationEndpoint} and a * {@link TokenEndpoint}) in the current application context, which must be a {@link DispatcherServlet} context. Many * features of the server can be customized using &lt;code&gt;@Beans&lt;/code&gt; of type {@link AuthorizationServerConfigurer} * (e.g. by extending {@link AuthorizationServerConfigurerAdapter}). The user is responsible for securing the * Authorization Endpoint (/oauth/authorize) using normal Spring Security features ({@link EnableWebSecurity * &amp;#064;EnableWebSecurity} etc.), but the Token Endpoint (/oauth/token) will be automatically secured using HTTP Basic * authentication on the client's credentials. Clients &lt;em&gt;must&lt;/em&gt; be registered by providing a * {@link ClientDetailsService} through one or more AuthorizationServerConfigurers." />
      <item value="Sets up a Zuul server endpoint and installs some reverse proxy filters in it, so it can * forward requests to backend servers. The backends can be registered manually through * configuration or via DiscoveryClient. * * @see EnableZuulServer for how to get a Zuul server without any proxying" />
      <item value="Set up the application to act as a generic Zuul server without any built-in reverse * proxy features. The routes into the Zuul server can be configured through * {@link ZuulProperties} (by default there are none)." />
      <item value="Circuit Breaker" />
      <item value="ets up a Zuul server endpoint and installs some reverse proxy filters in it, so it can * forward requests to backend servers. The backends can be registered manually through * configuration or via DiscoveryClient." />
      <item value="Set up the application to act as a generic Zuul server without any built-in reverse * proxy features. The routes into the Zuul server can be configured through" />
      <item value="SneakyThrow will avoid javac's insistence that you either catch or throw onward any checked exceptions that * statements in your method body declare they generate." />
      <item value="check Token Access" />
      <item value="token Key Access" />
      <item value="allow Form Authentication For Clients" />
      <item value="Authorization Server Security Configurer" />
      <item value="sequential" />
      <item value="to classify a filter by type. Standard types in Zuul are &quot;pre&quot; for pre-routing filtering, * &quot;route&quot; for routing to an origin, &quot;post&quot; for post-routing filters, &quot;error&quot; for error handling." />
      <item value="determines" />
      <item value="accredit" />
      <item value="(If none of the installed providers supply an implementation of * {@code SecureRandom}, a system-provided source of randomness is * used.)." />
      <item value="nitializes the key pair generator using the specified parameter * set and the {@code SecureRandom} * implementation of the highest-priority installed provider as the source * of randomness." />
      <item value="the source of randomness for this generator." />
      <item value="This is an * algorithm-specific metric, such as modulus length, specified in * number of bits." />
      <item value="This instance is immutable * and unaffected by this method call." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="353" />
        <entry key="ENGLISH" value="406" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="047c5f8aedf1f7ca" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>
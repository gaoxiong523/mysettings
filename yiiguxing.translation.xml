<application>
  <component name="AppStorage">
    <histories>
      <item value="Channels of this type are safe for use by multiple concurrent threads * though at most one accept operation can be outstanding at any time. * If a thread initiates an accept operation before a previous accept operation * has completed then an {@link AcceptPendingException} will be thrown." />
      <item value="An asynchronous channel for stream-oriented listening sockets." />
      <item value="devops" />
      <item value="destination" />
      <item value="This method transfers bytes from this buffer into the given * destination array. An invocation of this method of the form * &lt;tt&gt;src.get(a)&lt;/tt&gt; behaves in exactly the same way as the invocation" />
      <item value="Relative bulk &lt;i&gt;get&lt;/i&gt; method." />
      <item value="After a sequence of channel-read or &lt;i&gt;put&lt;/i&gt; operations, invoke * this method to prepare for a sequence of channel-write or relative" />
      <item value="Flips this buffer. The limit is set to the current position and then * the position is set to zero. If the mark is defined then it is * discarded." />
      <item value="Flips" />
      <item value="An invocation of this method of the form &lt;tt&gt;k.isAcceptable()&lt;/tt&gt; * behaves in exactly the same way as the expression" />
      <item value="Tests whether this key's channel is ready to accept a new socket * connection." />
      <item value="p&gt; A key is valid upon creation and remains so until it is cancelled, * its channel is closed, or its selector is closed. &lt;/p&gt;" />
      <item value="valid" />
      <item value="Returns the approximate total number of tasks that have ever been * scheduled for execution. Because the states of tasks and * threads may change dynamically during computation, the returned * value is only an approximation." />
      <item value="Ecosystem" />
      <item value="Calls {@link ChannelHandlerContext#fireChannelReadComplete()} to forward * to the next {@link ChannelInboundHandler} in the {@link ChannelPipeline}. * * Sub-classes may override this method to change behavior." />
      <item value="Return the value if present, otherwise return {@code other}." />
      <item value="present" />
      <item value="Adapter to delegate serialization/deserialization to {@link RedisSerializer}." />
      <item value="portal" />
      <item value="&lt;p&gt;Usages of this class should typically be of the form: * {@code ThreadLocalRandom.current().nextX(...)} (where * {@code X} is {@code Int}, {@code Long}, etc). * When all usages are of this form, it is never possible to * accidently share a {@code ThreadLocalRandom} across multiple threads." />
      <item value="A random number generator isolated to the current thread. Like the * global {@link java.util.Random} generator used by the {@link * java.lang.Math} class, a {@code ThreadLocalRandom} is initialized * with an internally generated seed that may not otherwise be * modified. When applicable, use of {@code ThreadLocalRandom} rather * than shared {@code Random} objects in concurrent programs will * typically encounter much less overhead and contention. Use of * {@code ThreadLocalRandom} is particularly appropriate when multiple * tasks (for example, each a {@link ForkJoinTask}) use random numbers * in parallel in thread pools." />
      <item value="A random number generator isolated to the current thread." />
      <item value="invokers" />
      <item value="Returns &lt;code&gt;true&lt;/code&gt; as soon as the lock is acquired. * If the lock is currently held by another thread in this or any * other process in the distributed system this method keeps trying * to acquire the lock for up to &lt;code&gt;waitTime&lt;/code&gt; before * giving up and returning &lt;code&gt;false&lt;/code&gt;. If the lock is acquired, * it is held until &lt;code&gt;unlock&lt;/code&gt; is invoked, or until &lt;code&gt;leaseTime&lt;/code&gt; * have passed since the lock was granted - whichever comes first." />
      <item value="Demarcates a property to be used as version field to implement optimistic locking on entities. *" />
      <item value="&gt; The &lt;code&gt;Version&lt;/code&gt; property should be mapped to * the primary table for the entity class; applications that * map the &lt;code&gt;Version&lt;/code&gt; property to a table other than * the primary table will not be portable." />
      <item value="Only a single &lt;code&gt;Version&lt;/code&gt; property or field * should be used per class; applications that use more than one * &lt;code&gt;Version&lt;/code&gt; property or field will not be portable." />
      <item value="Specifies the version field or property of an entity class that * serves as its optimistic lock value. The version is used to ensure * integrity when performing the merge operation and for optimistic * concurrency control. *" />
      <item value="Annotation to declare an appropriate {@code TemporalType} on query method parameters. Note that this annotation can * only be used on parameters of type {@link Date}. *" />
      <item value="Wrapper annotation to allow {@link QueryHint} annotations to be bound to methods. It will be evaluated when using * {@link Query} on a query method or if you derive the query from the method name. If you rely on named queries either * use the XML or annotation based way to declare {@link QueryHint}s in combination with the actual named query * declaration." />
      <item value="Indicates a query method should be considered as modifying query as that changes the way it needs to be executed. * This annotation is only considered if used on actual query methods (either derived or manually defined through a * {@link Query} annotation). It's not applied on custom implementation methods as they already have control over the * underlying data access APIs." />
      <item value="Annotation used to specify the {@link LockModeType} to be used when executing the query. It will be evaluated when * using {@link Query} on a query method or if you derive the query from the method name." />
      <item value="Annotation to enable auditing in JPA via annotation configuration." />
      <item value="* If you would like to use a {@code Future} for the sake * of cancellability but not provide a usable result, you can * declare types of the form {@code Future&lt;?&gt;} and * return {@code null} as a result of the underlying task." />
      <item value="Cancellation is performed by the * {@code cancel} method. Additional methods are provided to * determine if the task completed normally or was cancelled. Once a * computation has completed, the computation cannot be cancelled." />
      <item value="The result can only be retrieved using method * {@code get} when the computation has completed, blocking if * necessary until it is ready." />
      <item value="Methods are provided to check if the computation is * complete, to wait for its completion, and to retrieve the result of * the computation." />
      <item value="A {@code Future} represents the result of an asynchronous * computation." />
      <item value="A task that returns a result and may throw an exception. * Implementors define a single method with no arguments called" />
      <item value="PRESENT" />
      <item value="More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if * this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that * &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;. * If this set already contains the element, the call leaves the set * unchanged and returns &lt;tt&gt;false&lt;/tt&gt;." />
      <item value="Adds the specified element to this set if it is not already present." />
      <item value="Unable to commit against JDBC Connection" />
      <item value="ramp-up" />
      <item value="ram" />
      <item value="Shutdown hook installed for: NFLoadBalancer-PingTimer-order-service" />
      <item value="Allocation Failure" />
      <item value="Allocation" />
      <item value="codec" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="606" />
        <entry key="ENGLISH" value="659" />
        <entry key="FRENCH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="047c5f8aedf1f7ca" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>
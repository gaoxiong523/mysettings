<application>
  <component name="AppStorage">
    <histories>
      <item value="Override this method to configure the {@link HttpSecurity}. Typically subclasses * should not invoke this method by calling super as it may override their * configuration. The default configuration is:" />
      <item value="Configure the properties and enhanced functionality of the Authorization Server endpoints." />
      <item value="Zero or more {@code RequestInterceptors} may be configured for purposes such as adding headers to * all requests. No guarantees are give with regards to the order that interceptors are applied. * Once interceptors are applied, {@link Target#apply(RequestTemplate)} is called to create the * immutable http request sent via {@link Client#execute(Request, feign.Request.Options)}. &lt;br&gt;" />
      <item value="An {@code int} value that may be updated atomically. See the * {@link java.util.concurrent.atomic} package specification for * description of the properties of atomic variables. An * {@code AtomicInteger} is used in applications such as atomically * incremented counters, and cannot be used as a replacement for an * {@link java.lang.Integer}. However, this class does extend * {@code Number} to allow uniform access by tools and utilities that * deal with numerically-based classes." />
      <item value="Memory consistency effects: For each pair of threads that * successfully exchange objects via an {@code Exchanger}, actions * prior to the {@code exchange()} in each thread * &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt; * those subsequent to a return from the corresponding {@code exchange()} * in the other thread." />
      <item value="Here are the highlights of a class that uses an {@code Exchanger} * to swap buffers between threads so that the thread filling the * buffer gets a freshly emptied one when it needs it, handing off the * filled one to the thread emptying the buffer." />
      <item value="A synchronization point at which threads can pair and swap elements * within pairs. Each thread presents some object on entry to the * {@link #exchange exchange} method, matches with a partner thread, * and receives its partner's object on return. An Exchanger may be * viewed as a bidirectional form of a {@link SynchronousQueue}. * Exchangers may be useful in applications such as genetic algorithms * and pipeline designs." />
      <item value="additional Authentication Checks" />
      <item value="Protect from downstream leaks of password" />
      <item value="A pre-authentication filter for OAuth2 protected resources. Extracts an OAuth2 token from the incoming request and * uses it to populate the Spring Security context with an {@link OAuth2Authentication} (if used in conjunction with an * {@link OAuth2AuthenticationManager})." />
      <item value="conjunction" />
      <item value="An OAuth2 client filter that can be used to acquire an OAuth2 access token from an authorization server, and load an * authentication object into the SecurityContext" />
      <item value="set Serialization Strategy" />
      <item value="Lettuce Connection Factory" />
      <item value="持久化" />
      <item value="The class is * designed to respond to {@link UsernamePasswordAuthenticationToken} authentication * requests." />
      <item value="subclasses" />
      <item value="An {@link AuthenticationProvider} implementation that retrieves user details from a * {@link UserDetailsService}." />
      <item value="Retrieve" />
      <item value="extract Access Token" />
      <item value="We don't want to accidentally issue a token, and we have no way to reconstruct the refresh token" />
      <item value="Calculated" />
      <item value="intercepted" />
      <item value="Strategy for enhancing an access token before it is stored by an {@link AuthorizationServerTokenServices} * implementation." />
      <item value="Helper that translates between JWT encoded token values and OAuth authentication * information (in both directions). Also acts as a {@link TokenEnhancer} when tokens are * granted." />
      <item value="Enables Spring Security global method security similar to the &amp;lt;global-method-security&amp;gt;" />
      <item value="The following annotations are annotated with {@link EnableGlobalAuthentication}" />
      <item value="authenticated" />
      <item value="is Account Non Expired" />
      <item value="is Account Non Locked" />
      <item value="is Credentials Non Expired" />
      <item value="A user approval handler that remembers approval decisions by consulting existing tokens" />
      <item value="approval" />
      <item value="AuthorizationServerEndpointsConfigurer" />
      <item value="authorize Requests" />
      <item value="Configures the {@link AuditorAware} bean to be used to lookup the current principal." />
      <item value="PA entity listener to capture auditing information on persiting and updating entities. To get this one flying be * sure you configure it as entity listener in your {@code orm.xml} as follows:" />
      <item value="legacy" />
      <item value="Client Details Service" />
      <item value="Resource Server Token Services" />
      <item value="principal" />
      <item value="credentials" />
      <item value="Convenience annotation for enabling an Authorization Server (i.e. an {@link AuthorizationEndpoint} and a * {@link TokenEndpoint}) in the current application context, which must be a {@link DispatcherServlet} context. Many * features of the server can be customized using &lt;code&gt;@Beans&lt;/code&gt; of type {@link AuthorizationServerConfigurer} * (e.g. by extending {@link AuthorizationServerConfigurerAdapter}). The user is responsible for securing the * Authorization Endpoint (/oauth/authorize) using normal Spring Security features ({@link EnableWebSecurity * &amp;#064;EnableWebSecurity} etc.), but the Token Endpoint (/oauth/token) will be automatically secured using HTTP Basic * authentication on the client's credentials. Clients &lt;em&gt;must&lt;/em&gt; be registered by providing a * {@link ClientDetailsService} through one or more AuthorizationServerConfigurers." />
      <item value="Sets up a Zuul server endpoint and installs some reverse proxy filters in it, so it can * forward requests to backend servers. The backends can be registered manually through * configuration or via DiscoveryClient. * * @see EnableZuulServer for how to get a Zuul server without any proxying" />
      <item value="Set up the application to act as a generic Zuul server without any built-in reverse * proxy features. The routes into the Zuul server can be configured through * {@link ZuulProperties} (by default there are none)." />
      <item value="Circuit Breaker" />
      <item value="ets up a Zuul server endpoint and installs some reverse proxy filters in it, so it can * forward requests to backend servers. The backends can be registered manually through * configuration or via DiscoveryClient." />
      <item value="Set up the application to act as a generic Zuul server without any built-in reverse * proxy features. The routes into the Zuul server can be configured through" />
      <item value="SneakyThrow will avoid javac's insistence that you either catch or throw onward any checked exceptions that * statements in your method body declare they generate." />
      <item value="check Token Access" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="365" />
        <entry key="ENGLISH" value="418" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="047c5f8aedf1f7ca" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>
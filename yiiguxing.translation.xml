<application>
  <component name="AppStorage">
    <histories>
      <item value="Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License." />
      <item value="Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at" />
      <item value="A globally unique identifier for objects" />
      <item value="This class provides thread-local variables. These variables differ from * their normal counterparts in that each thread that accesses one (via its * {@code get} or {@code set} method) has its own, independently initialized * copy of the variable. {@code ThreadLocal} instances are typically private * static fields in classes that wish to associate state with a thread (e.g., * a user ID or Transaction ID)." />
      <item value="A globally unique identifier for objects." />
      <item value="The result of a delete operation. If the delete was unacknowledged, then {@code wasAcknowledged} will return false and all other methods * will throw {@code UnsupportedOperationException}." />
      <item value="Annotation to define custom metadata for document fields. *" />
      <item value="Indicate that the annotated element represents a stereotype for the index." />
      <item value="If set to true reject all documents that contain a duplicate value for the indexed field." />
      <item value="Defines the default language to be used with this document. *" />
      <item value="The collection the document representing the entity is supposed to be stored in. If not configured, a default * collection name will be derived from the type's name. The attribute supports SpEL expressions to dynamically * calculate the collection to based on a per operation basis. *" />
      <item value="Identifies a domain object to be persisted to MongoDB." />
      <item value="Implementations of this interface are encouraged to handle exceptions locally where * it makes sense or alternatively let the exception bubble up in which case by default * the exception is logged and the session closed with" />
      <item value="binary" />
      <item value="A handler for WebSocket messages and lifecycle events." />
      <item value="Possibly consider using a shorter maxLifetime value" />
      <item value="graphql" />
      <item value="graph" />
      <item value="estate" />
      <item value="Converts A string to an integer. * @param s A string to convert into a number. * @param radix A value between 2 and 36 that specifies the base of the number in numString. * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal. * All other strings are considered decimal." />
      <item value="Integration Authenticator" />
      <item value="Set the ApplicationContext that this object runs in. * Normally this call will be used to initialize the object. * &lt;p&gt;Invoked after population of normal bean properties but before an init callback such * as {@link org.springframework.beans.factory.InitializingBean#afterPropertiesSet()} * or a custom init-method. Invoked after {@link ResourceLoaderAware#setResourceLoader}, * {@link ApplicationEventPublisherAware#setApplicationEventPublisher} and * {@link MessageSourceAware}, if applicable." />
      <item value="&gt;For a list of all bean lifecycle methods, see the * {@link org.springframework.beans.factory.BeanFactory BeanFactory javadocs}" />
      <item value="{@link org.springframework.context.support.ApplicationObjectSupport} is a * convenience base class for application objects, implementing this interface." />
      <item value="Note that file resource dependencies can also be exposed as bean properties * of type {@link org.springframework.core.io.Resource}, populated via Strings * with automatic type conversion by the bean factory. This removes the need * for implementing any callback interface just for the purpose of accessing * a specific file resource." />
      <item value="This interface can also be implemented if an object needs access to file * resources, i.e. wants to call {@code getResource}, wants to publish * an application event, or requires access to the MessageSource. However, * it is preferable to implement the more specific {@link ResourceLoaderAware}, * {@link ApplicationEventPublisherAware} or {@link MessageSourceAware} interface * in such a specific scenario." />
      <item value="Implementing this interface makes sense for example when an object * requires access to a set of collaborating beans. Note that configuration * via bean references is preferable to implementing this interface just * for bean lookup purposes." />
      <item value="Interface to be implemented by any object that wishes to be notified * of the {@link ApplicationContext} that it runs in." />
      <item value="Application Context Aware" />
      <item value="Is there an unresolvable circular reference?" />
      <item value="unresolvable" />
      <item value="A {@link HttpSecurity} is similar to Spring Security's XML &amp;lt;http&amp;gt; element in the * namespace configuration. It allows configuring web based security for specific http * requests. By default it will be applied to all requests, but can be restricted using * {@link #requestMatcher(RequestMatcher)} or other similar methods." />
      <item value="An OAuth2 client filter that can be used to acquire an OAuth2 access token from an authorization server, and load an * authentication object into the SecurityContext" />
      <item value="Allows subclasses to actually retrieve the &lt;code&gt;UserDetails&lt;/code&gt; from an * implementation-specific location, with the option of throwing an * &lt;code&gt;AuthenticationException&lt;/code&gt; immediately if the presented credentials are * incorrect (this is especially useful if it is necessary to bind to a resource as * the user in order to obtain or generate a &lt;code&gt;UserDetails&lt;/code&gt;). * &lt;p&gt; * Subclasses are not required to perform any caching, as the * &lt;code&gt;AbstractUserDetailsAuthenticationProvider&lt;/code&gt; will by default cache the * &lt;code&gt;UserDetails&lt;/code&gt;. The caching of &lt;code&gt;UserDetails&lt;/code&gt; does present * additional complexity as this means subsequent requests that rely on the cache will * need to still have their credentials validated, even if the correctness of * credentials was assured by subclasses adopting a binding-based strategy in this * method. Accordingly it is important that subclasses either disable caching (if they * want to ensure that this method is the only method that is capable of * authenticating a request, as no &lt;code&gt;UserDetails&lt;/code&gt; will ever be cached) or * ensure subclasses implement * {@link #additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)} * to compare the credentials of a cached &lt;code&gt;UserDetails&lt;/code&gt; with subsequent * authentication requests. * &lt;/p&gt; * &lt;p&gt; * Most of the time subclasses will not perform credentials inspection in this method, * instead performing it in * {@link #additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)} * so that code related to credentials validation need not be duplicated across two * methods. * &lt;/p&gt; * * @param username The username to retrieve * @param authentication The authentication request, which subclasses &lt;em&gt;may&lt;/em&gt; * need to perform a binding-based retrieval of the &lt;code&gt;UserDetails&lt;/code&gt; * * @return the user information (never &lt;code&gt;null&lt;/code&gt; - instead an exception should * the thrown) * * @throws AuthenticationException if the credentials could not be validated * (generally a &lt;code&gt;BadCredentialsException&lt;/code&gt;, an * &lt;code&gt;AuthenticationServiceException&lt;/code&gt; or * &lt;code&gt;UsernameNotFoundException&lt;/code&gt;)" />
      <item value="Ensure we return the original credentials the user supplied, // so subsequent attempts are successful even with encoded passwords. // Also ensure we return the original getDetails(), so that future // authentication events after cache expiry contain the details" />
      <item value="Allows subclasses to perform any additional checks of a returned (or cached) * &lt;code&gt;UserDetails&lt;/code&gt; for a given authentication request. Generally a subclass * will at least compare the {@link Authentication#getCredentials()} with a * {@link UserDetails#getPassword()}. If custom logic is needed to compare additional * properties of &lt;code&gt;UserDetails&lt;/code&gt; and/or * &lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;, these should also appear in this * method." />
      <item value="Caching is handled by storing the &lt;code&gt;UserDetails&lt;/code&gt; object being placed in the * {@link UserCache}. This ensures that subsequent requests with the same username can be * validated without needing to query the {@link UserDetailsService}. It should be noted * that if a user appears to present an incorrect password, the {@link UserDetailsService} * will be queried to confirm the most up-to-date password was used for comparison. * Caching is only likely to be required for stateless applications. In a normal web * application, for example, the &lt;tt&gt;SecurityContext&lt;/tt&gt; is stored in the user's session * and the user isn't reauthenticated on each request. The default cache implementation is * therefore {@link NullUserCache}." />
      <item value="As container adapters are not recommended to be used, and * &lt;code&gt;UserDetails&lt;/code&gt; implementations provide additional flexibility, by default a * &lt;code&gt;UserDetails&lt;/code&gt; is returned. To override this default, set the * {@link #setForcePrincipalAsString} to &lt;code&gt;true&lt;/code&gt;." />
      <item value="Using &lt;code&gt;UserDetails&lt;/code&gt; is appropriate if you require access to * additional properties of the authenticated user, such as email addresses, * human-friendly names etc." />
      <item value="Using &lt;code&gt;String&lt;/code&gt; is appropriate * if a container adapter is being used, as it expects &lt;code&gt;String&lt;/code&gt; representations * of the username" />
      <item value="Upon successful validation, a &lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt; will be * created and returned to the caller. The token will include as its principal either a * &lt;code&gt;String&lt;/code&gt; representation of the username, or the {@link UserDetails} that was * returned from the authentication repository" />
      <item value="subclasses" />
      <item value="A base {@link AuthenticationProvider} that allows subclasses to override and work with * {@link org.springframework.security.core.userdetails.UserDetails} objects. The class is * designed to respond to {@link UsernamePasswordAuthenticationToken} authentication * requests." />
      <item value="Sets a new list of custom authentication filters for the TokenEndpoint. Filters will be set upstream of the * default BasicAuthenticationFilter." />
      <item value="Adds a new custom authentication filter for the TokenEndpoint. Filters will be set upstream of the default * BasicAuthenticationFilter." />
      <item value="token Key Access" />
      <item value="check Token Access" />
      <item value="An unordered, unkeyed collection that can contain the same element * multiple times. The Java collections API, curiously, has no &lt;tt&gt;Bag&lt;/tt&gt;. * Most developers seem to use &lt;tt&gt;List&lt;/tt&gt;s to represent bag semantics, * so Hibernate follows this practice." />
      <item value="All the implementations supplied by the static methods are immutable." />
      <item value="This class contains a standard set of adjusters, available as static methods." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="428" />
        <entry key="ENGLISH" value="479" />
        <entry key="FRENCH" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="047c5f8aedf1f7ca" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>
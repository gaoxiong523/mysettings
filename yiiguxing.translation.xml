<application>
  <component name="AppStorage">
    <histories>
      <item value="A special {@link #LinkedHashMap(int,float,boolean) constructor} is * provided to create a linked hash map whose order of iteration is the order * in which its entries were last accessed, from least-recently accessed to * most-recently (&lt;i&gt;access-order&lt;/i&gt;). This kind of map is well-suited to * building LRU caches. Invoking the {@code put}, {@code putIfAbsent}, * {@code get}, {@code getOrDefault}, {@code compute}, {@code computeIfAbsent}, * {@code computeIfPresent}, or {@code merge} methods results * in an access to the corresponding entry (assuming it exists after the * invocation completes). The {@code replace} methods only result in an access * of the entry if the value is replaced. The {@code putAll} method generates one * entry access for each mapping in the specified map, in the order that * key-value mappings are provided by the specified map's entry set iterator. * &lt;i&gt;No other methods generate entry accesses.&lt;/i&gt; In particular, operations * on collection-views do &lt;i&gt;not&lt;/i&gt; affect the order of iteration of the * backing map." />
      <item value="accessed" />
      <item value="This technique is particularly useful if a module takes a map on input, * copies it, and later returns results whose order is determined by that of * the copy. (Clients generally appreciate having things returned in the same * order they were presented.) *" />
      <item value="This implementation spares its clients from the unspecified, generally * chaotic ordering provided by {@link HashMap} (and {@link Hashtable}), * without incurring the increased cost associated with {@link TreeMap}. It * can be used to produce a copy of a map that has the same order as the * original," />
      <item value="&lt;p&gt;Hash table and linked list implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface, * with predictable iteration order. This implementation differs from * &lt;tt&gt;HashMap&lt;/tt&gt; in that it maintains a doubly-linked list running through * all of its entries. This linked list defines the iteration ordering, * which is normally the order in which keys were inserted into the map * (&lt;i&gt;insertion-order&lt;/i&gt;). Note that insertion order is not affected * if a key is &lt;i&gt;re-inserted&lt;/i&gt; into the map. (A key &lt;tt&gt;k&lt;/tt&gt; is * reinserted into a map &lt;tt&gt;m&lt;/tt&gt; if &lt;tt&gt;m.put(k, v)&lt;/tt&gt; is invoked when * &lt;tt&gt;m.containsKey(k)&lt;/tt&gt; would return &lt;tt&gt;true&lt;/tt&gt; immediately prior to * the invocation.)" />
      <item value="quota" />
      <item value="policy" />
      <item value="While this may seem a more roundabout way to perform an aggregation * compared to simply mutating a running total in a loop, reduction * operations parallelize more gracefully, without needing additional * synchronization and with greatly reduced risk of data races." />
      <item value="associative" />
      <item value="reduction" />
      <item value="Performs" />
      <item value="purchase" />
      <item value="If {@code orders} is a stream of purchase orders, and each purchase * order contains a collection of line items, then the following produces a * stream containing all the line items in all the orders:" />
      <item value="The {@code flatMap()} operation has the effect of applying a one-to-many * transformation to the elements of the stream, and then flattening the * resulting elements into a new stream." />
      <item value="Returns a stream consisting of the results of replacing each element of * this stream with the contents of a mapped stream produced by applying * the provided mapping function to each element. Each mapped stream is * {@link java.util.stream.BaseStream#close() closed} after its contents * have been placed into this stream. (If a mapped stream is {@code null} * an empty stream is used, instead.)" />
      <item value="Returns a stream consisting of the results of applying the given * function to the elements of this stream." />
      <item value="Loads the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;. * This method searches for classes in the same manner as the {@link * #loadClass(String, boolean)} method." />
      <item value="test Not Exceeding Capacity Request" />
      <item value="behind" />
      <item value="an array of Strings linking the CSV columns to their corresponding field in the bean (the array length * should match the number of columns). A &lt;tt&gt;null&lt;/tt&gt; entry in the array indicates that the column * should be ignored (the field in the bean will be null - or its default value)." />
      <item value="the type to instantiate. If the type is a class then a new instance will be created using the default * no-args constructor. If the type is an interface, a proxy object which implements the interface will * be created instead." />
      <item value="Reads a row of a CSV file and populates an instance of the specified class, using the supplied name mapping to * map column values to the appropriate fields." />
      <item value="loyalty Points" />
      <item value="Parses CSV files according to the specified format." />
      <item value="dialects" />
      <item value="Values can be appended to the output by calling the {@link #print(Object)} method." />
      <item value="Prints values in a {@link CSVFormat CSV format}. *" />
      <item value="A CSV record parsed from a CSV file." />
      <item value="权限" />
      <item value="环境" />
      <item value="A cancellable asynchronous computation. This class provides a base * implementation of {@link Future}, with methods to start and cancel * a computation, query to see if the computation is complete, and * retrieve the result of the computation. The result can only be * retrieved when the computation has completed; the {@code get} * methods will block if the computation has not yet completed. Once * the computation has completed, the computation cannot be restarted * or cancelled (unless the computation is invoked using * {@link #runAndReset})." />
      <item value="You seem to have declared too little query method parameters!" />
      <item value="Represents a geospatial sphere value." />
      <item value="Sphere" />
      <item value="NEUTRAL" />
      <item value="Represents a geospatial point value. *" />
      <item value="indices" />
      <item value="analyze" />
      <item value="The transport client allows to create a client that is not part of the cluster, but simply connects to one * or more nodes directly by adding their respective addresses using {" />
      <item value="OFFSET ILLEGAL" />
      <item value="Deprecated" />
      <item value="regarded" />
      <item value="Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License." />
      <item value="Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at" />
      <item value="A globally unique identifier for objects" />
      <item value="This class provides thread-local variables. These variables differ from * their normal counterparts in that each thread that accesses one (via its * {@code get} or {@code set} method) has its own, independently initialized * copy of the variable. {@code ThreadLocal} instances are typically private * static fields in classes that wish to associate state with a thread (e.g., * a user ID or Transaction ID)." />
      <item value="A globally unique identifier for objects." />
      <item value="The result of a delete operation. If the delete was unacknowledged, then {@code wasAcknowledged} will return false and all other methods * will throw {@code UnsupportedOperationException}." />
      <item value="Annotation to define custom metadata for document fields. *" />
      <item value="Indicate that the annotated element represents a stereotype for the index." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="469" />
        <entry key="ENGLISH" value="520" />
        <entry key="FRENCH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="047c5f8aedf1f7ca" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>